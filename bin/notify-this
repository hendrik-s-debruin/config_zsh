#!/bin/env bash

function help() {
	echo "Usage: notify-this [--suppress-success-msg] [--suppress-failure-message] [--success SUCCESS_MSG] [--failure FAILURE_MSG] [--app-name APP_NAME] [--expire-time EXPIRE_TIME] -- command [arg [args ... ] ]"
}

success_msg="Success"
failure_msg="Failure"
app_name="notify-this"
expire_time="0"
should_display_success=true
should_display_failure=true
verbose=false

# Step over all arguments and consume them
while (( $# )); do
	case $1 in
		# Command seprator, consume it and stop consumption
		# Remaining arguments are the subcommand and its arguments
		"--")
			shift
			break
		;;

		"--success")
			shift
			success_msg=$1
		;;

		"--suppress-success-msg")
			should_display_success=false
		;;

		"--failure")
			shift
			failure_msg=$1
		;;

		"--suppress-failure-message")
			should_display_failure=false
		;;

		"--app-name")
			shift
			app_name=$1
		;;

		"--expire-time")
			shift
			expire_time=$1
		;;

		"--help")
			help
			exit 0
		;;

		"--verbose")
			verbose=true
		;;

		*)
			echo Error: Unexpected argument \"$1\"
			help
			exit 1
		;;
	esac
	shift
done

# Call the command that was passed after '--'
$@

exit_status=$?

# Notify
if [[ $exit_status -eq 0 && $should_display_success = true ]]; then
	if [[ $verbose = true ]]; then
		figlet Success! | lolcat
	fi
	notify-send --category=notify-this-success --app-name=$app_name --expire-time=$expire_time "$success_msg"
elif [[ $exit_status -ne 0 && $should_display_failure = true ]]; then
	notify-send --category=notify-this-failure --app-name=$app_name --expire-time=$expire_time "$failure_msg"
fi

exit $exit_status
